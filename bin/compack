#!/usr/bin/env node

/**
 * @license
 * Copyright (c) 2016 Rajasegar Chandran. All rights reserved.
 */

// jshint node: true
'use strict';

const nopt = require('nopt');
const fs = require('fs');
const path = require('path');
const compack = require('../lib/compack');

let options = {
    path: "",
    css: "css",
    html:"html",
    es6: false
};

const help = [
    'compack: A Bundler for Web Components - Bundle your web component assets HTML, CSS and JS into one file',
    '',
    'Usage:',
    'compack --create my-component',
    'compack bundle',
    '',
    'Options:',
    '   -h|--help: print this message',
    '   -v|--version: print version number',
].join("\n");

let args = nopt(
    {
        help:Boolean,
        version: Boolean,
        create: path,
        css: String,
        html: String,
        es6: Boolean
    },
    {
        'h': ['--help'],
        'v': ['--version'],
        'c': ['--create']
    }
);

function printHelp() {
    console.log(help);
}

let pkg = require("../package.json");

function printVersion() {
    console.log("compack: ",pkg.version);
}

if(args.version) {
    printVersion();
    process.exit(0);
}

if(args.help) {
    printHelp();
    process.exit(0);
}

// CSS Preprocessor options
if(args.css) {
    options.css = args.css;
}

// HTML Template options
if(args.html) {
    options.html = args.html;
}

// ES6 option
if(args.es6) {
    options.es6 = args.es6;
}

if(args.create) {
    // create applicaton
    console.log("Creating component: ",args.create );
    options.path = args.create;

    createComponent(options);

    process.exit(0);
}

function createComponent(opts) {
    let componentName = path.basename(path.resolve(opts.path));
    let absPath = path.resolve(opts.path);

    let html = loadTemplate('component.html');
    let css = loadTemplate('component.css');
    let esVersion = (options.es6) ? "es6" : "es5" ;
    let js = loadTemplate(`component-${esVersion}.js`);

    let cssExt = "css";
    let htmlExt = "html";
    let packageTemplate = {
      name: componentName, 
      version: "0.0.1",
      description: "An awesome Web Component",
      keywords: [
        "web",
        "components"
      ],
      license: "MIT",
      devDependencies: {
      },
      dependencies: {
      }
    };
    
    // Write babel dependencies in package.json
    if(options.es6) {
        packageTemplate.dependencies["babel-core"] = "^6.5.2";
        packageTemplate.dependencies["babel-preset-es2015"] = "^6.5.0";
    }

    switch(options.css) {
        case "sass":
            packageTemplate.dependencies["node-sass"] =  "^3.4.2";
            cssExt = "scss";
            break;
        case "less":
            cssExt = "less";
            packageTemplate.dependencies["less"] = "^2.6.0";
            break;
        case "stylus":
            cssExt = "styl";
            packageTemplate.dependencies["stylus"] = "^0.53.0";
            break;
        default:
            break;
    }
    
    // HTML Template Engine
    switch(options.html) {
        case "jade":
            packageTemplate.dependencies["jade"] = "^1.11.0";
            htmlExt = "jade";
            break;
        case "ejs":
            packageTemplate.dependencies["ejs"] = "^2.4.1";
            htmlExt = "ejs";
            break;
        case "haml":
            packageTemplate.dependencies["haml"] = "^0.6.2";
            htmlExt = "haml";
            break;
        default:
            break;
    }

    let configTemplate = `{
        "components":[
            {
                "name": "${componentName}",
                "css" : "components/${componentName}/${componentName}.${cssExt}",
                "html": "components/${componentName}/${componentName}.${htmlExt}",
                "js": "components/${componentName}/${componentName}.js",
                "imports": [ ],
                "es6": ${options.es6}
            }
        ]
    }`;

    let babelrc = loadTemplate(".babelrc");
    let dirMode = 0o755;
    fs.mkdirSync(absPath,dirMode);
    fs.mkdirSync(absPath + '/components',dirMode);
    fs.mkdirSync(absPath + '/components/' + componentName,dirMode);

    // Write component html file
    let htmlFileName = `${absPath}/components/${componentName}/${componentName}.${htmlExt}`;
    write(htmlFileName,html);

    // Write component css file
    let cssFileName = `${absPath}/components/${componentName}/${componentName}.${cssExt}`;
    write(cssFileName,css);

    // Write component javascript file
    let jsFileName = `${absPath}/components/${componentName}/${componentName}.js`;
    write(jsFileName,js);
    write(absPath + '/component.json', configTemplate);
    if(options.es6) {
        write(absPath + '/.babelrc', babelrc);
    }




    write(absPath + '/package.json',JSON.stringify(packageTemplate,null,2));

}

function write(path,str,mode) {
    fs.writeFileSync(path,str, {mode: mode || '0666'});
    console.log('   create :' + path);
}

function loadTemplate(name) {
    return fs.readFileSync(path.join(__dirname,'..','templates',name),'utf-8');
}
if(args.argv.original.length === 0) {
    (new compack(options)).bundle();
}

